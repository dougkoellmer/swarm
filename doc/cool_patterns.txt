Some cool patterns discovered in b33hive...


- Having the easy option between verbose and "compiled" transaction json and request paths

- enum-based request paths

- sending a transaction with just the path enum and a json encodable object

- json enum keys allow completely flat json hierarchy for requests, because keys can't collide...also allow you to effectively selectively serialize large objects...just serialize the portion of the object you want to, then on client, the whole object attempts to read all the json, but only deserializes those portions that were sent down.

- "app contexts", instead of singletons on the class itself...removes a lot of boilerplate, both getting singleton instances, and in creating the classic singleton design pattern with getInstance(), etc...also removes any ambiguity about how the singleton is allocated, or if it even is at all, and allows subclassing of the singleton, which is impossible unless you do s_instance = this in the constructor...decouples the class so it doesn't care whether it's a singleton or not...you can provide the context to classes where some fields are still uninitialized, freeing you from worrying about instantiation order...two classes can be given contexts that can be used to refer to one another...providing the class instances themselves would be impossible through the constructor.